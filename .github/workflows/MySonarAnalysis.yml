# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

# Name of the Pipeline
name: MyWebApplication

# Push code to branch to run the pipeline
on:
  push:
    branches: [ "main"]

# Add the Job to run the set of actions and steps
jobs:
  # This is Build Job
  build:
    # Select the runner on which you have to run the pipeline
    runs-on: self-hosted
    defaults:
      run:
        # Select the working directory
        working-directory: ./MyWebApplication
    
    # Add the set of steps
    steps:
      # Checkout to the repository
      - uses: actions/checkout@v4.2.2

      # Setup the MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

      # Install the Nuget Package
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2.0.0
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

      # Restore the Nuget Package
      - name: Restore Packages
        run: nuget restore MyWebApplication.sln

      # Begin the SonarQube Analysis
      - name: SonarQube Begin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          D:\SonarCloud\SonarScanner\SonarScanner.MSBuild.exe begin /k:"MyWebApplication" /n:"MyWebApplication" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.cs.opencover.reportsPaths="%CD%\opencover.xml"

      # Build the normal solution
      - name: Build Solution
        run: |
          msbuild.exe MyWebApplication.sln /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl="../_build"

      # Run the test cases
      - name: Run tests
        run: |
          & "C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" "MyWebApplication.Tests\bin\Release\MyWebApplication.Tests.dll" --collect:"Code Coverage"
        working-directory: ${{ github.workspace }}/
        env:
          VSTEST_RUNNER: 'true'
        
      # Build the Solution using the MSBuild for SonarQube Analysis
      - name: ReBuild Solution
        env:
          # GITHUB_TOKEN is pre-defined variable
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          shell: powershell
        run: |
           msbuild.exe MyWebApplication.sln

      # Generate OpenCover File
      - name: Generate Opencover File
        shell: cmd
        run: |
          "D:\SonarQube 9.9\opencover.4.7.1221\OpenCover.Console.exe" -output:"opencover.xml" -register:user -target:"C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" -targetargs:"MyWebApplication.Tests\bin\Release\MyWebApplication.Tests.dll"
        working-directory: ${{ github.workspace }}/

      # Extract Code Coverage Percentage
      - name: Extract Code Coverage Percentage
        id: coverage
        working-directory: ${{ github.workspace }}
        shell: powershell
        run: |
          if (!(Test-Path "opencover.xml")) {
            Write-Error "Coverage file not found!"
            exit 1
          }
      
          # Extract only the first numeric coverage value
          $coverage = Select-String -Path "opencover.xml" -Pattern 'sequenceCoverage' | ForEach-Object {
            ($_ -match 'sequenceCoverage="(\d+(\.\d+)?)"') | Out-Null
            $matches[1]
          } | Select-Object -First 1
      
          if (-not $coverage) {
            Write-Error "Failed to extract coverage percentage!"
            exit 1
          }
      
          Write-Host "Extracted Code Coverage: $coverage"
          echo "percentage=$coverage" >> $env:GITHUB_ENV
      
      # Display Code Coverage
      - name: Display Code Coverage
        shell: cmd
        run: echo Code Coverage is %percentage%%

      # # Verify Coverage Threshold - exit /b 1
      # - name: Verify Coverage Threshold
      #   shell: powershell
      #   run: |
      #     echo Code Coverage is %percentage%%
      #     if %percentage% LSS 80 (
      #       echo Coverage %percentage%%% is below the threshold (80%).
      #     ) else (
      #       echo Coverage %percentage%%% meets the threshold (80% or higher).
      #     )

      - name: Verify Coverage Threshold
        shell: powershell
        run: |
          Write-Output "Code Coverage is $env:percentage%"
          if ($env:percentage -lt 80) {
              Write-Error "Coverage $env:percentage% is below the threshold (80%)."
              exit 1
          } else {
              Write-Output "Coverage $env:percentage% meets the threshold (80% or higher)."
          }
          
      # Publish quality profile and analysis report on SonarQube Dashboard
      - name: SonarQube End
        env:
          # GITHUB_TOKEN is pre-defined variable
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          D:\SonarCloud\SonarScanner\SonarScanner.MSBuild.exe end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      
      # Upload the artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: MyWebApplication
          path: "./_build"
